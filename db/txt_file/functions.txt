-- TABLE-VALUED FUNCTIONS:
-- LIST ALL REGISTERED COURSE:
CREATE OR ALTER FUNCTION [dbo].[func_list_all_paid_courses] (@user_id INT)
RETURNS @LopHocDangKi TABLE (
    course_id INT,
    title NVARCHAR(255),
    description NVARCHAR(MAX),
    price DECIMAL(10,2),
    instructor VARCHAR(100),
    created_at DATETIME,
    updated_at DATETIME,
    level_name NVARCHAR(50),
    register_id INT,
    register_date DATETIME
)
AS
BEGIN
    INSERT INTO @LopHocDangKi (
        course_id,
        title,
        description,
        price,
        instructor,
        created_at,
        updated_at,
        level_name,
        register_id,
        register_date
    )
    SELECT DISTINCT
        c.course_id,
        c.title,
        CONVERT(NVARCHAR(MAX), c.description),
        c.price,
        c.instructor,
        c.created_at,
        c.updated_at,
        l.level_name,
        r.register_id,
        r.register_date
    FROM
        (
            SELECT
                rc.register_id,
                rc.register_date,
                rc.course_id
            FROM
                register_course rc
            WHERE
                rc.user_id = @user_id
        ) r
        INNER JOIN courses c ON c.course_id = r.course_id
        INNER JOIN level_courses l ON l.level_id = c.level_id
        INNER JOIN orders o ON o.user_id = @user_id
    WHERE
        c.course_id NOT IN (
            SELECT
                oi.course_id
            FROM
                order_items oi
                INNER JOIN orders o ON o.order_id = oi.order_id
            WHERE
                o.user_id = @user_id
                AND o.payment_status_id <> 2
        )
        AND o.payment_status_id = 2;
    
    RETURN;
END
GO
CREATE OR ALTER FUNCTION [dbo].[func_list_all_reg_courses] (@user_id INT)
RETURNS @LopHocDangKi TABLE (
    course_id INT,
    title NVARCHAR(255),
    description NVARCHAR(MAX),
    price DECIMAL(10,2),
    instructor VARCHAR(100),
    created_at DATETIME,
    updated_at DATETIME,
    level_name NVARCHAR(50),
    register_id INT,
    register_date DATETIME
)
AS
BEGIN
    INSERT INTO @LopHocDangKi (
        course_id,
        title,
        description,
        price,
        instructor,
        created_at,
        updated_at,
        level_name,
        register_id,
        register_date
    )
    SELECT DISTINCT
        c.course_id,
        c.title,
        CONVERT(NVARCHAR(MAX), c.description),
        c.price,
        c.instructor,
        c.created_at,
        c.updated_at,
        l.level_name,
        r.register_id,
        r.register_date
    FROM
        (
            SELECT
                rc.register_id,
                rc.register_date,
                rc.course_id
            FROM
                register_course rc
            WHERE
                rc.user_id = @user_id
        ) r
        INNER JOIN courses c ON c.course_id = r.course_id
        INNER JOIN level_courses l ON l.level_id = c.level_id
        INNER JOIN orders o ON o.user_id = @user_id
    WHERE
        c.course_id NOT IN (
            SELECT
                oi.course_id
            FROM
                order_items oi
                INNER JOIN orders o ON o.order_id = oi.order_id
            WHERE
                o.user_id = @user_id
                AND o.payment_status_id = 2
        )
        AND o.payment_status_id <> 2;
    
    RETURN;
END

GO
-- SCALAR-VALUED FUNCTIONS:
-- QUANTITY REGISTERED COURSE:
CREATE OR ALTER FUNCTION [dbo].[func_num_reg_courses] (@user_id int)
RETURNS int
AS
BEGIN
	DECLARE @Count INT;

    SELECT @Count = COUNT(*)
    FROM orders o
    WHERE o.payment_status_id <> 2 and o.user_id = @user_id;

    RETURN @Count;
END
GO
-- TOTAL MONEY FOR REGISTERED COURSES:
CREATE OR ALTER FUNCTION [dbo].[func_total_money_reg_courses] (@user_id int)
RETURNS decimal(10, 2)
AS
BEGIN
	DECLARE @total_amount DECIMAL(10,2) = 0;

    SELECT @total_amount = SUM(c.total_amount)
    FROM orders c
	WHERE c.payment_status_id <> 2
	IF @total_amount is NULL
		RETURN 0;
    RETURN @total_amount;
END
GO
-- CHECK WALLET IF EXIST RETURN 1 ELSE RETURN 0:
CREATE OR ALTER FUNCTION [dbo].[func_check_wallet_exist](@user_id INT)
RETURNS INT
AS
BEGIN
    DECLARE @has_wallet INT;

    SELECT @has_wallet = CASE WHEN EXISTS (SELECT 1 FROM budget WHERE user_id = @user_id) THEN 1 ELSE 0 END;

    RETURN @has_wallet;
END
GO
CREATE OR ALTER FUNCTION [dbo].[func_get_current_money](@user_id INT)
RETURNS DECIMAL(10,2)
AS
BEGIN
    DECLARE @balance DECIMAL(10,2);

    -- Lấy số tiền hiện tại trong túi của người dùng
    SELECT @balance = amount
    FROM budget
    WHERE user_id = @user_id;

    RETURN @balance;
END;